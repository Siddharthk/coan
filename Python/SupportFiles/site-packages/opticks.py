import _opticks

__doc__ = """Routines and classes for iterfacing with Opticks."""

class RasterElement(object):
   """Wraps a RasterElement"""
   def __init__(self, name=None):
      """Get a raster element.
         name = The name of the raster element or if None, the primary raster element from the active view.
      """
         
      self.__de = _opticks.get_data_element("raster", name)
      self.__acc = None

   @property
   def dims(self):
      "The dimension vector for the raster element"
      return self.__de['dims']

   @property
   def name(self):
      "The name of the raster element"
      return self.__de['name']

   @property
   def interleave(self):
      "The interleave (BIP, BIL, or BSQ)"
      return self.__de['interleave']

   @property
   def datatype(self):
      "The dataype of the raster element."
      return self.dt_conv[self.__de['datatype']]

   def __repr__(self):
      return "<RasterElement [%i,%i,%i] '%s'>" % (self.__de['dims'][0],self.__de['dims'][1],self.__de['dims'][2],self.__de['name'])

   def getData(self, subcube=None):
      """Get the data from a raster element as a numpy Array.
       subcube = None for all the data or a dictionare containing options rows and bands keys.
                 Each key fromtails a tuple with the start and option end values for the rows of bands.
                 The band key is ignored if the interleave is BIP. If the interleave is not BIP and a row
                 subcube is specified, then a start band must be specificed. The number of bands is 1.
      """
      self.__acc, a = _opticks.get_raster_data(self.__de, subcube)
      return a

   def newLayer(self, name, arr, type="raster", interleave="BIP", replace=True):
      """Create a new layer for the given array.
         name = The name of the layer and corresponding raster element. If this element
                exists, the arr must be the say type and dimensions of the existing element
                and the data will be replaced.
         arr = The numpy Array with the data.
         type = raster, pseudocolor, or threshold
         interleave = The interleave format for the data. BIP, BIL, or BSQ
         replace = If the element exists and has compatible params, its data will be overwritten by arr.
      """
      _opticks.new_raster_from_array(name, arr, type, interleave, replace, self.__de)

class Signature(object):
   """An Opticks Signature object."""
   def __init__(self, name, parent=None):
      """Get an existing signature with a specified name and optional parent.
         name = The name of the signature
         parent = The name of the parent data element the parent RasterElement or Signature.
      """
      if isinstance(parent, RasterElement) or isinstance(parent, Signature):
         parent = parent.name
      self.__de = _opticks.get_data_element("signature", name, parent)

   @property
   def name(self):
      "The name of the signature."
      return self.__de['name']

   def __iter__(self):
      "Get the names of different data sets in this signature."
      return iter(self.__de['dataNames'])

   def __contains__(self, item):
      "Is the given data set in this signature?"
      return item in self.__de['dataNames']

   def __repr__(self):
      return "<Signature '%s'>" % self.__de['name']

   def __getitem__(self, name):
      "Get the data for a particular name."
      return _opticks.get_signature_data(self.__de, name)

def new_view(name, arr, interleave="BIP"):
   """Create a new view with the given data.
      name = The name of the new view, new raster element, and new layer.
      arr = The numpy Array with the data.
      interleave = The interleave format for the data. BIP, BIL, or BSQ
   """
   _opticks.new_raster_from_array(name, arr, "view", interleave, False)
   return RasterElement(name)
